import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.Property

class NpmJavaRunnerExtension {
	final Property<String> website
	final Property<String> vcsUrl
	final Property<String> developerName

	NpmJavaRunnerExtension(ObjectFactory objects, Project project) {
		website = objects.property(String)
		vcsUrl = objects.property(String)
		developerName = objects.property(String)

		// Set defaults
		website.convention(project.providers.provider { "https://github.com/tomasbjerre/${project.name}"})
		vcsUrl.convention(project.providers.provider { "https://github.com/tomasbjerre/${project.name}"})
		developerName.convention("Tomas Bjerre")
	}
}

project.extensions.create('npmJavaRunnerExtension', NpmJavaRunnerExtension, project.objects)

project.plugins.apply 'maven-publish'

task publishNpm() {
	def pushAllTagsResult = new ProcessBuilder('npm', 'publish')
			.directory(project.projectDir)
			.inheritIO()
			.start()
			.waitFor()
	logger.lifecycle("NPM exit code: ${pushAllTagsResult}")
}

task setupNpmJavaRunnerFiles() {
	doLast {
		shouldGitIgnore('index.js')
		file("index.js").text = """#!/usr/bin/env node
		require('npm-java-runner/lib/index').run(__dirname);
		"""
		shouldGitIgnore('package.json')
		shouldGitIgnore('package-lock.json')
		shouldGitIgnore('node_modules')
		file("package.json").text = """{
			"version": "PKG_VERSION",
			"name": "PKG_NAME",
			"homepage": "PKG_WEBSITE",
			"repository": "PKG_GIT",
			"author": "PKG_AUTHOR",
			"description": "PKG_DESCRIPTION",
			"runnable-jar-regexp": ".*build/libs/.*\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.jar\$",
			"files": [
				"build/libs"
			],
			"bin": "./index.js",
			"license": "Apache 2",
			"dependencies": {
				"npm-java-runner": "2.0.0"
			}
		}
		"""
		ant.replace(file: new File("package.json"), token: "PKG_NAME", value: project.name)
		ant.replace(file: new File("package.json"), token: "PKG_VERSION", value: version)
		ant.replace(file: new File("package.json"), token: "PKG_WEBSITE", value: project.extensions.npmJavaRunnerExtension.website.get())
		ant.replace(file: new File("package.json"), token: "PKG_GIT", value: project.extensions.npmJavaRunnerExtension.vcsUrl.get())
		ant.replace(file: new File("package.json"), token: "PKG_AUTHOR", value: project.extensions.npmJavaRunnerExtension.developerName.get())
		ant.replace(file: new File("package.json"), token: "PKG_DESCRIPTION", value: project.description.replaceAll("[\"']",""))
	}
}
publishNpm.dependsOn setupNpmJavaRunnerFiles
build.dependsOn setupNpmJavaRunnerFiles

/**
 * Supporting methods
 */
def shouldGitIgnore(filename) {
	if (!file('.gitignore').text.contains(filename)) {
		throw new RuntimeException("The .gitignore should include '${filename}'")
	}
	logger.lifecycle("${filename} is ignored")
}
