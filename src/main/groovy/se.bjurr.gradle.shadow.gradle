import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.Property
import org.gradle.api.tasks.bundling.Jar
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

class ShadowExtension {
	final Property<String> relocate
	final Property<String> mainClass
	final Property<String> jarResourcesFolder

	ShadowExtension(ObjectFactory objects) {
		/**
		 * relocate: org:org,com:com # Empty by default will.
		 */
		relocate = objects.property(String)
		mainClass = objects.property(String)
		jarResourcesFolder = objects.property(String)

		relocate.convention("")
		jarResourcesFolder.convention("src/jar/resources")
	}
}

project.extensions.create('shadowExtension', ShadowExtension, project.objects)

project.plugins.apply 'com.gradleup.shadow'
project.plugins.apply 'java-library'
project.plugins.apply 'maven-publish'

tasks.named('jar') { Jar jarTask ->
	jarTask.enabled = false
}

java {
	withSourcesJar()
	withJavadocJar()
}

project.afterEvaluate {
	tasks.named('shadowJar') { ShadowJar shadowJarTask ->
		shadowJarTask.archiveBaseName.set(project.name)
		shadowJarTask.archiveVersion.set(project.version)
		shadowJarTask.archiveClassifier.set('')

		shadowJarTask.archiveFileName.set("${project.name}-${project.version}.jar")

		doFirst {
			def mainClassValue = project.extensions.shadowExtension.mainClass.orNull
			if (mainClassValue) {
				shadowJarTask.manifest {
					attributes('Main-Class': mainClassValue)
				}
			}

			project.extensions.shadowExtension.relocate.get().tokenize(',').each { relocation ->
				if (!relocation) return
					def (relocateFrom, relocateTo) = relocation.contains(":")
							? relocation.split(":") as List
							: [
								relocation,
								"${project.group}.${project.name}.${relocation}".replaceAll("[^a-zA-Z.]", "")
							]
				logger.lifecycle("Relocating ${relocateFrom} to ${relocateTo}")
				shadowJarTask.relocate(relocateFrom, relocateTo)
			}
		}
	}
}

project.afterEvaluate {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifacts.clear()

				artifact(shadowJar) {
					classifier = ''
				}

				artifact(sourcesJar) {
					classifier = 'sources'
				}
				artifact(javadocJar) {
					classifier = 'javadoc'
				}

				pom {
					name = project.name
					description = project.description ?: project.name
					groupId = project.group
					artifactId = project.name
					version = project.version
				}
			}
		}
	}
}

tasks.named("build") { it.dependsOn(tasks.named("shadowJar")) }
